# Strava Activity Monitor - Simplified Format Example
# This is the proposed simplified version of strava_monitor_v2.yaml
# Reduces from 130 lines to ~40 lines while maintaining all functionality

name: "Strava Activity Monitor"
description: "Monitor Strava activities, update visibility, enable 3D maps, track kudos"
goal: "Check for new activities in the last 24 hours, make qualifying activities public with 3D maps, and track kudos"

# Optional global settings (can be omitted for defaults)
settings:
  time_range: 24h              # Auto-calculates time window
  state_tracking: true         # Auto-saves last check time
  retry_on_error: true         # Self-correcting like V3
  max_retries: 3

# Natural language task list
tasks:
  # Simplified from steps 1-4: Get recent activities
  # System automatically:
  # - Gets current time
  # - Calculates 24h ago
  # - Calls getMyActivities with correct parameters
  - id: fetch
    do: Get my activities from last 24 hours
    save_as: activities
  
  # Simplified from step 5: LLM analysis + steps 6-7: Update loops
  # System automatically:
  # - Analyzes which activities need updates
  # - Loops over matching activities
  # - Handles both visibility and 3D map updates
  - id: update_visibility
    do: Make activities public if they meet visibility criteria
    when: activities
    rules:
      - Type is NOT "Walk" (walks always stay private)
      - If type is "Ride", distance must be >= 10km (10000 meters)
      - Skip activities that are already public
    for_each: activities
    optional: true  # Don't fail workflow if this fails
  
  - id: enable_3d
    do: Enable 3D satellite maps for public activities
    when: activities
    for_each: activities
    optional: true
  
  # Simplified from steps 8-11: Kudos tracking and merging
  # System automatically:
  # - Loops over activities
  # - Fetches kudos for each
  # - Merges with existing state
  # - Saves back to state
  - id: fetch_kudos
    do: Fetch kudos for all recent activities
    when: activities
    merge_with_state: kudos_givers  # Auto-loads, merges, saves
    optional: true  # Don't fail if kudos fetch fails

# Step 3 and 12 (load/save state) are now automatic with state_tracking: true

# Execution schedule
schedule: hourly

# Permission settings (same as V2)
permissions:
  allow_write: true
  allow_updateactivity: true
  requires_approval: []

# COMPARISON WITH V2:
# 
# V2 Format (strava_monitor_v2.yaml):
# - 130 lines
# - 12 explicit steps
# - Manual time calculations (steps 1-2)
# - Manual state management (steps 3, 12)
# - Explicit template syntax: {{time_24h_ago.datetime.unix_timestamp}}
# - Explicit loop definitions: loop: "{{analysis.activities_to_update}}"
# - Explicit dependencies: depends_on: ["fetch_activities"]
# - Separate LLM analysis step with detailed context and output_format
# - Manual kudos merging logic (steps 9-11)
#
# Simplified Format (this file):
# - 40 lines (69% reduction!)
# - 4 natural language tasks
# - Automatic time calculations
# - Automatic state management
# - Natural language: "last 24 hours"
# - Implicit loops: for_each: activities
# - Implicit dependencies: when: activities
# - Rules embedded in task
# - Automatic merging: merge_with_state
#
# FUNCTIONALITY:
# Both versions do exactly the same thing:
# ✅ Monitor activities from last 24 hours
# ✅ Make qualifying activities public (not Walks, Rides >= 10km)
# ✅ Enable 3D satellite maps
# ✅ Track kudos givers
# ✅ Persist state
# ✅ Run hourly
#
# EXECUTION:
# Simplified format uses V3-style self-correction:
# - Each task is attempted with LLM reasoning
# - On error, analyzes and retries with corrected parameters
# - Smaller LLM context per task (better for small models)
# - More resilient to API changes
#
# MIGRATION:
# To migrate from V2 to simplified:
# 1. Copy this file to instructions/strava_monitor.yaml
# 2. Run: python main.py --once --instruction strava_monitor
# 3. Verify same results as V2 version
# 4. Once confident, can remove strava_monitor_v2.yaml or keep as reference

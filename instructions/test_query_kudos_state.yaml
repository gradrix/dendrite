# Test Query Timeseries State
#
# This test should run AFTER test_timeseries_kudos.yaml has populated the state.
# It demonstrates querying from state without API calls.

goal: |
  Query accumulated kudos data from memory without making redundant API calls.
  
  IMPORTANT: We want "activities from last 3 days that received kudos"
  This means: activities that HAPPENED in the last 3 days (using start_date timestamp)
  
  Steps:
  1. Get current date and time using getCurrentDate tool
  
  2. Calculate time window:
     - end_time = current time
     - start_time = current time - 3 days
  
  3. Query state first using queryTimeseriesState:
     queryTimeseriesState(
       key="kudos_timeseries",
       start_time=<start_time ISO format>,
       end_time=<end_time ISO format>,
       timestamp_field="timestamp"
     )
  
  4. Check the response:
     - If coverage == "full": We have all the data! No API call needed.
     - If coverage == "partial": We have some data but need to fill gaps
     - If coverage == "none": No data in memory, need full API fetch
  
  5. Report:
     - How many kudos activities found in state
     - Coverage status
     - Whether API call was needed
     - List activities if coverage is full

expected_behavior: |
  If test_timeseries_kudos ran successfully before this:
  - Should find activities with kudos in state
  - Coverage should be "full" (we have all data for 3-day window)
  - NO API call needed
  - Fast response from memory

notes: |
  This demonstrates the power of timeseries state:
  - Avoid duplicate API calls
  - Answer from memory when possible
  - Know when we need fresh data
